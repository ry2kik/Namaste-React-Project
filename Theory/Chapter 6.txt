1) Microservices Architechture:
	A microservices architecture is a type of application architecture where the application is developed as a collection of services. It provides the framework to develop, deploy, and maintain microservices architecture diagrams and services independently.

2) Monolithic Architechture:
	A monolithic architecture is the traditional unified model for the design of a software program. Monolithic, in this context, means "composed all in one piece."	

3) Why do we need useEffect:
	By using this Hook, you tell React that your component needs to do something after render. React will remember the function you passed (we’ll refer to it as our “effect”), and call it later after performing the DOM updates. In this effect, we set the document title, but we could also perform data fetching or call some other imperative API.

4) Optional Chaining: 
	The optional chaining (?.) operator accesses an object's property or calls a function. If the object accessed or function called is undefined or null, it returns undefined instead of throwing an error.

5) Shimmer UI:
	A shimmer screen is a version of the UI that doesn’t contain actual content. Instead, it mimics the page’s layout by showing its elements in a shape similar to the actual content as it is loading and becoming available.

6) Difference Between js Expression and statement:
	Expression: an expression is a bit of JavaScript code that produces a value.Example:
- 1 → produces 1
- "hello" → produces "hello"
- 5 * 10 → produces 50
- num > 100 → produces either true or false
- isHappy ? "🙂" : "🙁" → produces an emoji
- [1, 2, 3].pop() → produces the number 3

	Statement: A JavaScript program is a sequence of statements. Each statement is an instruction for the computer to do something.Ex:
- let hi = 5;
- if (hi > 10) {
  // More statements here
}
- throw new Error('Something exploded!');

7) Conditional Rendering:
	Conditional rendering in React works the same way conditions work in JavaScript. Use JavaScript operators like if or the conditional operator to create elements representing the current state, and let React update the UI to match them.We’ll create a Greeting component that displays either of these components depending on whether a user is logged in:
	const [isTrue, setIsTrue] = useState(false);
    	const authenticateUser = () => {
        	return isTrue;
    	};
	{ authenticateUser() ? (
                <button
                    onClick={() => {
                        setIsTrue(false);
                    }}
                >
                    Log out
                </button>
            ) : (
                <button
                    onClick={() => {
                        setIsTrue(true);
                    }}
                >
                    Log in
                </button>
         )}

8) CORS:
	Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate any origins (domain, scheme, or port) other than its own from which a browser should permit loading resources. CORS also relies on a mechanism by which browsers make a "preflight" request to the server hosting the cross-origin resource, in order to check that the server will permit the actual request. In that preflight, the browser sends headers that indicate the HTTP method and headers that will be used in the actual request.
	An example of a cross-origin request: the front-end JavaScript code served from https://domain-a.com uses XMLHttpRequest to make a request for https://domain-b.com/data.json.For security reasons, browsers restrict cross-origin HTTP requests initiated from scripts. For example, XMLHttpRequest and the Fetch API follow the same-origin policy. This means that a web application using those APIs can only request resources from the same origin the application was loaded from unless the response from other origins includes the right CORS headers.The CORS mechanism supports secure cross-origin requests and data transfers between browsers and servers. Modern browsers use CORS in APIs such as XMLHttpRequest or Fetch to mitigate the risks of cross-origin HTTP requests.

What requests use CORS: This cross-origin sharing standard can enable cross-origin HTTP requests for:
-  Invocations of the XMLHttpRequest or Fetch APIs, as discussed above.
- Web Fonts (for cross-domain font usage in @font-face within CSS), so that servers can deploy TrueType fonts that can only be loaded cross-origin and used by web sites that are permitted to do so.
- WebGL textures.
- Images/video frames drawn to a canvas using drawImage().
- CSS Shapes from images.
This is a general article about Cross-Origin Resource Sharing and includes a discussion of the necessary HTTP headers.

9) 	Async: async makes a function return a Promise.
	Await: await makes a function wait for a Promise.

10) const json = await data.json() is used to jsonify the data which is fetched from swigg's dapi.